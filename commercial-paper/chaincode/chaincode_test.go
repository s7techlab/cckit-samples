package chaincode_test

import (
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	. "github.com/s7techlab/cckit/testing/gomega"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/s7techlab/cckit/testing/expect"

	"testing"
	"time"

	"github.com/golang/protobuf/ptypes"
	testcc "github.com/s7techlab/cckit/testing"
	"github.com/s7techlab/hyperledger-fabric-samples/commercial-paper/chaincode"
	model "github.com/s7techlab/hyperledger-fabric-samples/commercial-paper/proto"
)

func TestCommercialPaperService(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Commercial Paper Suite")
}

var (
	// model.CPaperChaincode autogenerated from proto definition
	// in the next steps we will test service implementation
	cPaper model.CPaperChaincode = &chaincode.CPaperImpl{}

	// fixtures

	// Commercial paper identifier
	id = &model.CommercialPaperId{
		Issuer:      "SomeIssuer",
		PaperNumber: "0001",
	}

	// Issue transaction payload
	issue = &model.IssueCommercialPaper{
		Issuer:       id.Issuer,
		PaperNumber:  id.PaperNumber,
		IssueDate:    ptypes.TimestampNow(),
		MaturityDate: testcc.MustProtoTimestamp(time.Now().AddDate(0, 2, 0)),
		FaceValue:    100000,
		ExternalId:   "EXT0001",
	}

	// Buy transaction payload
	buy = &model.BuyCommercialPaper{
		Issuer:       id.Issuer,
		PaperNumber:  id.PaperNumber,
		CurrentOwner: id.Issuer,
		NewOwner:     "SomeBuyer",
		Price:        95000,
		PurchaseDate: ptypes.TimestampNow(),
	}

	// Redeem transaction payload
	redeem = &model.RedeemCommercialPaper{
		Issuer:         id.Issuer,
		PaperNumber:    id.PaperNumber,
		RedeemingOwner: buy.NewOwner,
		RedeemDate:     ptypes.TimestampNow(),
	}

	// Commercial paper in chaincode state
	cpaperInState = &model.CommercialPaper{
		Issuer:       id.Issuer,
		Owner:        id.Issuer,
		State:        model.CommercialPaper_ISSUED,
		PaperNumber:  id.PaperNumber,
		FaceValue:    issue.FaceValue,
		IssueDate:    issue.IssueDate,
		MaturityDate: issue.MaturityDate,
		ExternalId:   issue.ExternalId,
	}

	// We test only chaincode service, not chaincode with embedded service
	// cc - is tx handler simulator
	// ctx - chaincode context, linked with tx handler simulator
	cc, ctx = testcc.NewTxHandler(`Commercial paper`)
)

var _ = Describe(`Commercial paper service`, func() {

	It("Allow issuer to issue new commercial paper", func() {
		cc.Tx(func() {
			paper, err := cPaper.Issue(ctx, issue)

			Expect(err).NotTo(HaveOccurred())
			// Compare .string() view of proto message
			Expect(paper).To(StringerEqual(cpaperInState))
		})
	})

	It("Allow issuer to get commercial paper by composite primary key", func() {
		cc.Tx(func() {
			paper, err := cPaper.Get(ctx, id)

			Expect(err).NotTo(HaveOccurred())
			// Compare .string() view of proto message
			Expect(paper).To(StringerEqual(cpaperInState))
		})
	})

	It("Allow issuer to get commercial paper by unique key", func() {
		cc.Tx(func() {
			paper, err := cPaper.GetByExternalId(ctx, &model.ExternalId{
				Id: issue.ExternalId,
			})

			Expect(err).NotTo(HaveOccurred())
			// Compare .string() view of proto message
			Expect(paper).To(StringerEqual(cpaperInState))
		})
	})

	It("Allow issuer to get a list of commercial papers", func() {
		cc.Tx(func() {
			papers, err := cPaper.List(ctx, &empty.Empty{})

			Expect(err).NotTo(HaveOccurred())
			// Compare .string() view of proto message
			Expect(papers).To(StringerEqual(&model.CommercialPaperList{
				Items: []*model.CommercialPaper{cpaperInState},
			}))
		})
	})

	It("Allow buyer to buy commercial paper", func() {
		expectedState := proto.Clone(cpaperInState).(*model.CommercialPaper)
		expectedState.Owner = buy.NewOwner
		expectedState.State = model.CommercialPaper_TRADING

		// Tx "Buy"
		cc.Tx(func() {
			paper, err := cPaper.Buy(ctx, buy)

			Expect(err).NotTo(HaveOccurred())
			Expect(paper).To(StringerEqual(expectedState))
		})

		// check that tx produced event
		expect.EventIs(cc.TxEvent(), `BuyCommercialPaper`, buy)

		// Check chajncode state
		cc.Tx(func() {
			paper, err := cPaper.Get(ctx, id)

			Expect(err).NotTo(HaveOccurred())
			// Compare .string() view of proto message
			Expect(paper).To(StringerEqual(expectedState))
		})
	})

	It("Allow buyer to redeem commercial paper", func() {
		expectedState := proto.Clone(cpaperInState).(*model.CommercialPaper)
		expectedState.State = model.CommercialPaper_REDEEMED

		// Tx "Redeem"
		cc.Tx(func() {
			paper, err := cPaper.Redeem(ctx, redeem)

			Expect(err).NotTo(HaveOccurred())
			Expect(paper).To(StringerEqual(expectedState))
		})

		// check that tx produced event
		expect.EventIs(cc.TxEvent(), `RedeemCommercialPaper`, redeem)

		// Check chajncode state
		cc.Tx(func() {
			paper, err := cPaper.Get(ctx, id)

			Expect(err).NotTo(HaveOccurred())
			// Compare .string() view of proto message
			Expect(paper).To(StringerEqual(expectedState))
		})
	})

	It("Allow issuer to delete commercial paper", func() {
		cc.Tx(func() {
			_, err := cPaper.Delete(ctx, id)

			Expect(err).NotTo(HaveOccurred())
		})

		cc.Tx(func() {
			papers, err := cPaper.List(ctx, &empty.Empty{})

			Expect(err).NotTo(HaveOccurred())
			// Compare .string() view of proto message
			Expect(papers).To(StringerEqual(&model.CommercialPaperList{
				Items: []*model.CommercialPaper{},
			}))
		})
	})
})
