// Code generated by protoc-gen-go. DO NOT EDIT.
// source: commercial-paper.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommercialPaper_State int32

const (
	CommercialPaper_ISSUED   CommercialPaper_State = 0
	CommercialPaper_TRADING  CommercialPaper_State = 1
	CommercialPaper_REDEEMED CommercialPaper_State = 2
)

var CommercialPaper_State_name = map[int32]string{
	0: "ISSUED",
	1: "TRADING",
	2: "REDEEMED",
}

var CommercialPaper_State_value = map[string]int32{
	"ISSUED":   0,
	"TRADING":  1,
	"REDEEMED": 2,
}

func (x CommercialPaper_State) String() string {
	return proto.EnumName(CommercialPaper_State_name, int32(x))
}

func (CommercialPaper_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{0, 0}
}

// Commercial Paper state entry
type CommercialPaper struct {
	// Issuer and Paper number comprises composite primary key of Commercial paper entry
	Issuer       string                `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber  string                `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	Owner        string                `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	IssueDate    *timestamp.Timestamp  `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	MaturityDate *timestamp.Timestamp  `protobuf:"bytes,5,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	FaceValue    int32                 `protobuf:"varint,6,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	State        CommercialPaper_State `protobuf:"varint,7,opt,name=state,proto3,enum=proto.CommercialPaper_State" json:"state,omitempty"`
	// Additional unique field for entry
	ExternalId           string   `protobuf:"bytes,8,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommercialPaper) Reset()         { *m = CommercialPaper{} }
func (m *CommercialPaper) String() string { return proto.CompactTextString(m) }
func (*CommercialPaper) ProtoMessage()    {}
func (*CommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{0}
}

func (m *CommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommercialPaper.Unmarshal(m, b)
}
func (m *CommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommercialPaper.Marshal(b, m, deterministic)
}
func (m *CommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommercialPaper.Merge(m, src)
}
func (m *CommercialPaper) XXX_Size() int {
	return xxx_messageInfo_CommercialPaper.Size(m)
}
func (m *CommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_CommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_CommercialPaper proto.InternalMessageInfo

func (m *CommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *CommercialPaper) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CommercialPaper) GetIssueDate() *timestamp.Timestamp {
	if m != nil {
		return m.IssueDate
	}
	return nil
}

func (m *CommercialPaper) GetMaturityDate() *timestamp.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *CommercialPaper) GetFaceValue() int32 {
	if m != nil {
		return m.FaceValue
	}
	return 0
}

func (m *CommercialPaper) GetState() CommercialPaper_State {
	if m != nil {
		return m.State
	}
	return CommercialPaper_ISSUED
}

func (m *CommercialPaper) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// CommercialPaperId identifier part
type CommercialPaperId struct {
	Issuer               string   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber          string   `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommercialPaperId) Reset()         { *m = CommercialPaperId{} }
func (m *CommercialPaperId) String() string { return proto.CompactTextString(m) }
func (*CommercialPaperId) ProtoMessage()    {}
func (*CommercialPaperId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{1}
}

func (m *CommercialPaperId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommercialPaperId.Unmarshal(m, b)
}
func (m *CommercialPaperId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommercialPaperId.Marshal(b, m, deterministic)
}
func (m *CommercialPaperId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommercialPaperId.Merge(m, src)
}
func (m *CommercialPaperId) XXX_Size() int {
	return xxx_messageInfo_CommercialPaperId.Size(m)
}
func (m *CommercialPaperId) XXX_DiscardUnknown() {
	xxx_messageInfo_CommercialPaperId.DiscardUnknown(m)
}

var xxx_messageInfo_CommercialPaperId proto.InternalMessageInfo

func (m *CommercialPaperId) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CommercialPaperId) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

// ExternalId
type ExternalId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExternalId) Reset()         { *m = ExternalId{} }
func (m *ExternalId) String() string { return proto.CompactTextString(m) }
func (*ExternalId) ProtoMessage()    {}
func (*ExternalId) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{2}
}

func (m *ExternalId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExternalId.Unmarshal(m, b)
}
func (m *ExternalId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExternalId.Marshal(b, m, deterministic)
}
func (m *ExternalId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalId.Merge(m, src)
}
func (m *ExternalId) XXX_Size() int {
	return xxx_messageInfo_ExternalId.Size(m)
}
func (m *ExternalId) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalId.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalId proto.InternalMessageInfo

func (m *ExternalId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Container for returning multiple entities
type CommercialPaperList struct {
	Items                []*CommercialPaper `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CommercialPaperList) Reset()         { *m = CommercialPaperList{} }
func (m *CommercialPaperList) String() string { return proto.CompactTextString(m) }
func (*CommercialPaperList) ProtoMessage()    {}
func (*CommercialPaperList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{3}
}

func (m *CommercialPaperList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommercialPaperList.Unmarshal(m, b)
}
func (m *CommercialPaperList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommercialPaperList.Marshal(b, m, deterministic)
}
func (m *CommercialPaperList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommercialPaperList.Merge(m, src)
}
func (m *CommercialPaperList) XXX_Size() int {
	return xxx_messageInfo_CommercialPaperList.Size(m)
}
func (m *CommercialPaperList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommercialPaperList.DiscardUnknown(m)
}

var xxx_messageInfo_CommercialPaperList proto.InternalMessageInfo

func (m *CommercialPaperList) GetItems() []*CommercialPaper {
	if m != nil {
		return m.Items
	}
	return nil
}

// IssueCommercialPaper event
type IssueCommercialPaper struct {
	Issuer       string               `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber  string               `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	IssueDate    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
	MaturityDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	FaceValue    int32                `protobuf:"varint,5,opt,name=face_value,json=faceValue,proto3" json:"face_value,omitempty"`
	// external_id  - once more uniq id of state entry
	ExternalId           string   `protobuf:"bytes,6,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueCommercialPaper) Reset()         { *m = IssueCommercialPaper{} }
func (m *IssueCommercialPaper) String() string { return proto.CompactTextString(m) }
func (*IssueCommercialPaper) ProtoMessage()    {}
func (*IssueCommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{4}
}

func (m *IssueCommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueCommercialPaper.Unmarshal(m, b)
}
func (m *IssueCommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueCommercialPaper.Marshal(b, m, deterministic)
}
func (m *IssueCommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueCommercialPaper.Merge(m, src)
}
func (m *IssueCommercialPaper) XXX_Size() int {
	return xxx_messageInfo_IssueCommercialPaper.Size(m)
}
func (m *IssueCommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueCommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_IssueCommercialPaper proto.InternalMessageInfo

func (m *IssueCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *IssueCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *IssueCommercialPaper) GetIssueDate() *timestamp.Timestamp {
	if m != nil {
		return m.IssueDate
	}
	return nil
}

func (m *IssueCommercialPaper) GetMaturityDate() *timestamp.Timestamp {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *IssueCommercialPaper) GetFaceValue() int32 {
	if m != nil {
		return m.FaceValue
	}
	return 0
}

func (m *IssueCommercialPaper) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

// BuyCommercialPaper event
type BuyCommercialPaper struct {
	Issuer               string               `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber          string               `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	CurrentOwner         string               `protobuf:"bytes,3,opt,name=current_owner,json=currentOwner,proto3" json:"current_owner,omitempty"`
	NewOwner             string               `protobuf:"bytes,4,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
	Price                int32                `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	PurchaseDate         *timestamp.Timestamp `protobuf:"bytes,6,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BuyCommercialPaper) Reset()         { *m = BuyCommercialPaper{} }
func (m *BuyCommercialPaper) String() string { return proto.CompactTextString(m) }
func (*BuyCommercialPaper) ProtoMessage()    {}
func (*BuyCommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{5}
}

func (m *BuyCommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuyCommercialPaper.Unmarshal(m, b)
}
func (m *BuyCommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuyCommercialPaper.Marshal(b, m, deterministic)
}
func (m *BuyCommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyCommercialPaper.Merge(m, src)
}
func (m *BuyCommercialPaper) XXX_Size() int {
	return xxx_messageInfo_BuyCommercialPaper.Size(m)
}
func (m *BuyCommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyCommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_BuyCommercialPaper proto.InternalMessageInfo

func (m *BuyCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *BuyCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *BuyCommercialPaper) GetCurrentOwner() string {
	if m != nil {
		return m.CurrentOwner
	}
	return ""
}

func (m *BuyCommercialPaper) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

func (m *BuyCommercialPaper) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BuyCommercialPaper) GetPurchaseDate() *timestamp.Timestamp {
	if m != nil {
		return m.PurchaseDate
	}
	return nil
}

// RedeemCommercialPaper event
type RedeemCommercialPaper struct {
	Issuer               string               `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	PaperNumber          string               `protobuf:"bytes,2,opt,name=paper_number,json=paperNumber,proto3" json:"paper_number,omitempty"`
	RedeemingOwner       string               `protobuf:"bytes,3,opt,name=redeeming_owner,json=redeemingOwner,proto3" json:"redeeming_owner,omitempty"`
	RedeemDate           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=redeem_date,json=redeemDate,proto3" json:"redeem_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RedeemCommercialPaper) Reset()         { *m = RedeemCommercialPaper{} }
func (m *RedeemCommercialPaper) String() string { return proto.CompactTextString(m) }
func (*RedeemCommercialPaper) ProtoMessage()    {}
func (*RedeemCommercialPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8525a2ce3f7c09a, []int{6}
}

func (m *RedeemCommercialPaper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RedeemCommercialPaper.Unmarshal(m, b)
}
func (m *RedeemCommercialPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RedeemCommercialPaper.Marshal(b, m, deterministic)
}
func (m *RedeemCommercialPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedeemCommercialPaper.Merge(m, src)
}
func (m *RedeemCommercialPaper) XXX_Size() int {
	return xxx_messageInfo_RedeemCommercialPaper.Size(m)
}
func (m *RedeemCommercialPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_RedeemCommercialPaper.DiscardUnknown(m)
}

var xxx_messageInfo_RedeemCommercialPaper proto.InternalMessageInfo

func (m *RedeemCommercialPaper) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *RedeemCommercialPaper) GetPaperNumber() string {
	if m != nil {
		return m.PaperNumber
	}
	return ""
}

func (m *RedeemCommercialPaper) GetRedeemingOwner() string {
	if m != nil {
		return m.RedeemingOwner
	}
	return ""
}

func (m *RedeemCommercialPaper) GetRedeemDate() *timestamp.Timestamp {
	if m != nil {
		return m.RedeemDate
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.CommercialPaper_State", CommercialPaper_State_name, CommercialPaper_State_value)
	proto.RegisterType((*CommercialPaper)(nil), "proto.CommercialPaper")
	proto.RegisterType((*CommercialPaperId)(nil), "proto.CommercialPaperId")
	proto.RegisterType((*ExternalId)(nil), "proto.ExternalId")
	proto.RegisterType((*CommercialPaperList)(nil), "proto.CommercialPaperList")
	proto.RegisterType((*IssueCommercialPaper)(nil), "proto.IssueCommercialPaper")
	proto.RegisterType((*BuyCommercialPaper)(nil), "proto.BuyCommercialPaper")
	proto.RegisterType((*RedeemCommercialPaper)(nil), "proto.RedeemCommercialPaper")
}

func init() { proto.RegisterFile("commercial-paper.proto", fileDescriptor_f8525a2ce3f7c09a) }

var fileDescriptor_f8525a2ce3f7c09a = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x3b, 0xb1, 0xdb, 0x9c, 0xa4, 0x49, 0x76, 0xb6, 0x44, 0xde, 0x6c, 0x20, 0x59, 0x23,
	0xb4, 0x61, 0xa1, 0xb6, 0x14, 0x24, 0x24, 0xb8, 0x41, 0xcd, 0x8f, 0xa2, 0x08, 0x28, 0x95, 0x5b,
	0xaa, 0x72, 0x15, 0x1c, 0x7b, 0x9a, 0x8e, 0x88, 0x7f, 0x64, 0x8f, 0x9b, 0x46, 0x55, 0x6f, 0xfa,
	0x0a, 0xdc, 0xf0, 0x32, 0x3c, 0x05, 0x37, 0xdc, 0x21, 0x21, 0xde, 0x82, 0x1b, 0xe4, 0x19, 0x3b,
	0xc4, 0x69, 0xa2, 0x16, 0x56, 0xbd, 0x6a, 0x7d, 0xce, 0xf7, 0x7d, 0x73, 0xce, 0x99, 0xef, 0x4c,
	0xa0, 0x66, 0x79, 0x8e, 0x83, 0x03, 0x8b, 0x98, 0xb3, 0x03, 0xdf, 0xf4, 0x71, 0xa0, 0xf9, 0x81,
	0x47, 0x3d, 0x24, 0xb1, 0x3f, 0xf5, 0xe6, 0xd4, 0xf3, 0xa6, 0x33, 0xac, 0xb3, 0xaf, 0x49, 0x74,
	0xa1, 0x53, 0xe2, 0xe0, 0x90, 0x9a, 0x8e, 0xcf, 0x71, 0xf5, 0x57, 0xeb, 0x00, 0xec, 0xf8, 0x74,
	0x91, 0x24, 0x3f, 0x9f, 0x12, 0x7a, 0x19, 0x4d, 0x34, 0xcb, 0x73, 0x74, 0x67, 0x4e, 0xe8, 0x4f,
	0xde, 0x5c, 0x9f, 0x7a, 0x07, 0x2c, 0x79, 0x70, 0x65, 0xce, 0x88, 0x6d, 0x52, 0x2f, 0x08, 0xf5,
	0xe5, 0xbf, 0x09, 0xaf, 0x91, 0x88, 0x9a, 0x3e, 0xd1, 0x4d, 0xd7, 0xf5, 0xa8, 0x49, 0x89, 0xe7,
	0x86, 0x3c, 0xab, 0xde, 0xe5, 0xa0, 0xd2, 0x5b, 0x56, 0x7d, 0x1c, 0x17, 0x8d, 0x6a, 0x20, 0x93,
	0x30, 0x8c, 0x70, 0xa0, 0x08, 0x2d, 0xa1, 0x5d, 0x30, 0x92, 0x2f, 0xf4, 0x1a, 0x4a, 0xac, 0xab,
	0xb1, 0x1b, 0x39, 0x13, 0x1c, 0x28, 0x22, 0xcb, 0x16, 0x59, 0xec, 0x88, 0x85, 0xd0, 0x3e, 0x48,
	0xde, 0xdc, 0xc5, 0x81, 0x92, 0x63, 0x39, 0xfe, 0x81, 0xbe, 0x00, 0x60, 0x12, 0x63, 0xdb, 0xa4,
	0x58, 0xc9, 0xb7, 0x84, 0x76, 0xb1, 0x53, 0xd7, 0x78, 0x5d, 0x5a, 0xda, 0xac, 0x76, 0x9a, 0x4e,
	0xc3, 0x28, 0x30, 0x74, 0xdf, 0xa4, 0x18, 0x7d, 0x05, 0x7b, 0x8e, 0x49, 0xa3, 0x80, 0xd0, 0x05,
	0x67, 0x4b, 0x0f, 0xb2, 0x4b, 0x29, 0x81, 0x09, 0xbc, 0x0f, 0x70, 0x61, 0x5a, 0x78, 0x7c, 0x65,
	0xce, 0x22, 0xac, 0xc8, 0x2d, 0xa1, 0x2d, 0x19, 0x85, 0x38, 0x72, 0x16, 0x07, 0x50, 0x07, 0xa4,
	0x90, 0xc6, 0xba, 0x3b, 0x2d, 0xa1, 0x5d, 0xee, 0x34, 0xb8, 0xa0, 0xb6, 0x36, 0x12, 0xed, 0x24,
	0xc6, 0x18, 0x1c, 0x8a, 0x9a, 0x50, 0xc4, 0xd7, 0x14, 0x07, 0xae, 0x39, 0x1b, 0x13, 0x5b, 0xd9,
	0x65, 0xad, 0x42, 0x1a, 0x1a, 0xd9, 0xaa, 0x06, 0x12, 0x23, 0x20, 0x00, 0x79, 0x74, 0x72, 0xf2,
	0xfd, 0xa0, 0x5f, 0x7d, 0x86, 0x8a, 0xb0, 0x73, 0x6a, 0x1c, 0xf6, 0x47, 0x47, 0xc3, 0xaa, 0x80,
	0x4a, 0xb0, 0x6b, 0x0c, 0xfa, 0x83, 0xc1, 0xb7, 0x83, 0x7e, 0x55, 0x54, 0x8f, 0xe0, 0xf9, 0xda,
	0x81, 0x23, 0xfb, 0x1d, 0x6e, 0x41, 0x6d, 0x00, 0x0c, 0x96, 0xd5, 0xa0, 0x32, 0x88, 0xc4, 0x4e,
	0x44, 0x44, 0x62, 0xab, 0x3d, 0x78, 0xb1, 0x76, 0xda, 0x37, 0x24, 0xa4, 0xe8, 0x53, 0x90, 0x08,
	0xc5, 0x4e, 0xa8, 0x08, 0xad, 0x5c, 0xbb, 0xd8, 0xa9, 0x6d, 0x9e, 0x84, 0xc1, 0x41, 0xea, 0xaf,
	0x22, 0xec, 0x8f, 0xe2, 0x82, 0xd6, 0xcd, 0xf3, 0x41, 0xb6, 0xec, 0xae, 0xfc, 0xe7, 0x1f, 0x4d,
	0xf1, 0x5c, 0x58, 0x96, 0xff, 0xf1, 0xa6, 0xf2, 0x97, 0xa8, 0x8c, 0x99, 0x0e, 0x33, 0xb6, 0xc9,
	0x3d, 0x74, 0xf1, 0x5c, 0xa4, 0x25, 0xac, 0xda, 0x67, 0xb8, 0x6e, 0x9f, 0xfc, 0xa3, 0x55, 0xb2,
	0x36, 0xfa, 0x28, 0x63, 0xa3, 0xd8, 0x84, 0x12, 0x47, 0x56, 0x9f, 0xad, 0xda, 0xe9, 0x4d, 0xd6,
	0x1a, 0x72, 0xa6, 0xb9, 0x55, 0x8b, 0xfc, 0x22, 0x02, 0xea, 0x46, 0x8b, 0x27, 0x9c, 0xde, 0x27,
	0xb0, 0x67, 0x45, 0x41, 0x80, 0x5d, 0x3a, 0x5e, 0x59, 0xc9, 0x25, 0xb6, 0x94, 0x24, 0xbf, 0x63,
	0x1b, 0xfa, 0x21, 0x14, 0x5c, 0x3c, 0x4f, 0x80, 0xf9, 0x0c, 0x70, 0xd7, 0xc5, 0x73, 0x0e, 0x6a,
	0x80, 0xe4, 0x07, 0xc4, 0x5a, 0x6f, 0x9f, 0x07, 0xe3, 0x51, 0xfb, 0x51, 0x60, 0x5d, 0x9a, 0x61,
	0x72, 0x61, 0xf2, 0xe3, 0x47, 0x9d, 0x12, 0xe3, 0x51, 0xab, 0xbf, 0x0b, 0xf0, 0x9e, 0x81, 0x6d,
	0x8c, 0x9d, 0x27, 0x9c, 0x8e, 0x0e, 0x95, 0x80, 0x9d, 0x41, 0xdc, 0xe9, 0xc6, 0xf9, 0x94, 0x97,
	0x69, 0xde, 0x7c, 0x0f, 0x8a, 0x3c, 0xf2, 0x5f, 0x7d, 0x04, 0x9c, 0x16, 0xb7, 0xd6, 0xf9, 0x3b,
	0x0f, 0x72, 0x8f, 0xf7, 0xf2, 0x35, 0xe4, 0xd9, 0xda, 0xd5, 0xee, 0x49, 0x0c, 0xe2, 0x47, 0xbf,
	0x5e, 0xdf, 0xbc, 0x7f, 0x31, 0x47, 0xad, 0xdc, 0xfd, 0xf6, 0xd7, 0xcf, 0x62, 0x01, 0xed, 0xe8,
	0x16, 0xeb, 0x09, 0xfd, 0x08, 0xb9, 0x21, 0xa6, 0x48, 0xd9, 0xcc, 0x19, 0xd9, 0xf5, 0x2d, 0xdb,
	0xac, 0xbe, 0x61, 0x4a, 0xaf, 0x51, 0x33, 0x51, 0xd2, 0x6f, 0xf8, 0x28, 0x6f, 0xf5, 0x9b, 0xd5,
	0x49, 0xde, 0xa2, 0x73, 0xa8, 0x0c, 0x31, 0xed, 0x2e, 0x56, 0xde, 0x95, 0xe7, 0x89, 0xe6, 0xbf,
	0xa1, 0xad, 0xc7, 0xd4, 0xd9, 0x31, 0xfb, 0x08, 0xa5, 0xc7, 0xe0, 0x6b, 0x4a, 0x6c, 0xfd, 0x86,
	0xd8, 0xb7, 0xe8, 0x0c, 0x24, 0xf6, 0x90, 0xa0, 0x57, 0x09, 0x79, 0xd3, 0xb3, 0xb2, 0x55, 0x59,
	0x61, 0xca, 0x48, 0xdd, 0x4b, 0x95, 0x59, 0xfd, 0x5f, 0x0a, 0x6f, 0xd1, 0x31, 0xe4, 0xba, 0xd1,
	0x02, 0xbd, 0x4c, 0x88, 0xf7, 0x97, 0x6d, 0xab, 0x66, 0x8d, 0x69, 0x56, 0xd5, 0x62, 0xaa, 0x39,
	0x89, 0x16, 0xb1, 0xe2, 0x0f, 0x20, 0x73, 0x5f, 0xa2, 0xf4, 0x67, 0x62, 0xa3, 0x4d, 0xb7, 0xea,
	0xbe, 0x64, 0xba, 0x2f, 0xd4, 0x72, 0xaa, 0xcb, 0x9d, 0x11, 0x4b, 0x5b, 0x20, 0xf7, 0xf1, 0x0c,
	0x53, 0xfc, 0xff, 0xef, 0xf0, 0xed, 0x43, 0x77, 0x38, 0x91, 0x19, 0xff, 0xb3, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x68, 0x4d, 0x43, 0x3d, 0xa7, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CPaperClient is the client API for CPaper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CPaperClient interface {
	// List method returns all registered commercial papers
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CommercialPaperList, error)
	// Get method returns commercial paper data by id
	Get(ctx context.Context, in *CommercialPaperId, opts ...grpc.CallOption) (*CommercialPaper, error)
	// GetByExternalId
	GetByExternalId(ctx context.Context, in *ExternalId, opts ...grpc.CallOption) (*CommercialPaper, error)
	// Issue commercial paper
	Issue(ctx context.Context, in *IssueCommercialPaper, opts ...grpc.CallOption) (*CommercialPaper, error)
	// Buy commercial paper
	Buy(ctx context.Context, in *BuyCommercialPaper, opts ...grpc.CallOption) (*CommercialPaper, error)
	// Redeem commercial paper
	Redeem(ctx context.Context, in *RedeemCommercialPaper, opts ...grpc.CallOption) (*CommercialPaper, error)
	// Delete commercial paper
	Delete(ctx context.Context, in *CommercialPaperId, opts ...grpc.CallOption) (*CommercialPaper, error)
}

type cPaperClient struct {
	cc *grpc.ClientConn
}

func NewCPaperClient(cc *grpc.ClientConn) CPaperClient {
	return &cPaperClient{cc}
}

func (c *cPaperClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CommercialPaperList, error) {
	out := new(CommercialPaperList)
	err := c.cc.Invoke(ctx, "/proto.CPaper/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Get(ctx context.Context, in *CommercialPaperId, opts ...grpc.CallOption) (*CommercialPaper, error) {
	out := new(CommercialPaper)
	err := c.cc.Invoke(ctx, "/proto.CPaper/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) GetByExternalId(ctx context.Context, in *ExternalId, opts ...grpc.CallOption) (*CommercialPaper, error) {
	out := new(CommercialPaper)
	err := c.cc.Invoke(ctx, "/proto.CPaper/GetByExternalId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Issue(ctx context.Context, in *IssueCommercialPaper, opts ...grpc.CallOption) (*CommercialPaper, error) {
	out := new(CommercialPaper)
	err := c.cc.Invoke(ctx, "/proto.CPaper/Issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Buy(ctx context.Context, in *BuyCommercialPaper, opts ...grpc.CallOption) (*CommercialPaper, error) {
	out := new(CommercialPaper)
	err := c.cc.Invoke(ctx, "/proto.CPaper/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Redeem(ctx context.Context, in *RedeemCommercialPaper, opts ...grpc.CallOption) (*CommercialPaper, error) {
	out := new(CommercialPaper)
	err := c.cc.Invoke(ctx, "/proto.CPaper/Redeem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cPaperClient) Delete(ctx context.Context, in *CommercialPaperId, opts ...grpc.CallOption) (*CommercialPaper, error) {
	out := new(CommercialPaper)
	err := c.cc.Invoke(ctx, "/proto.CPaper/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPaperServer is the server API for CPaper service.
type CPaperServer interface {
	// List method returns all registered commercial papers
	List(context.Context, *empty.Empty) (*CommercialPaperList, error)
	// Get method returns commercial paper data by id
	Get(context.Context, *CommercialPaperId) (*CommercialPaper, error)
	// GetByExternalId
	GetByExternalId(context.Context, *ExternalId) (*CommercialPaper, error)
	// Issue commercial paper
	Issue(context.Context, *IssueCommercialPaper) (*CommercialPaper, error)
	// Buy commercial paper
	Buy(context.Context, *BuyCommercialPaper) (*CommercialPaper, error)
	// Redeem commercial paper
	Redeem(context.Context, *RedeemCommercialPaper) (*CommercialPaper, error)
	// Delete commercial paper
	Delete(context.Context, *CommercialPaperId) (*CommercialPaper, error)
}

func RegisterCPaperServer(s *grpc.Server, srv CPaperServer) {
	s.RegisterService(&_CPaper_serviceDesc, srv)
}

func _CPaper_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CPaper/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommercialPaperId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CPaper/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Get(ctx, req.(*CommercialPaperId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_GetByExternalId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).GetByExternalId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CPaper/GetByExternalId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).GetByExternalId(ctx, req.(*ExternalId))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CPaper/Issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Issue(ctx, req.(*IssueCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CPaper/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Buy(ctx, req.(*BuyCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Redeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemCommercialPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Redeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CPaper/Redeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Redeem(ctx, req.(*RedeemCommercialPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _CPaper_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommercialPaperId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPaperServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CPaper/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPaperServer).Delete(ctx, req.(*CommercialPaperId))
	}
	return interceptor(ctx, in, info, handler)
}

var _CPaper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CPaper",
	HandlerType: (*CPaperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CPaper_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CPaper_Get_Handler,
		},
		{
			MethodName: "GetByExternalId",
			Handler:    _CPaper_GetByExternalId_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _CPaper_Issue_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _CPaper_Buy_Handler,
		},
		{
			MethodName: "Redeem",
			Handler:    _CPaper_Redeem_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CPaper_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commercial-paper.proto",
}
