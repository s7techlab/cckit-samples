syntax = "proto3";

option go_package = "github.com/s7techlab/hyperledger-fabric-samples/samples/token/service/balance";
package examples.erc20_service.service.balance;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "mwitkow/go-proto-validators/validator.proto";



// Balance
service BalanceService {
  // Returns the amount of tokens owned by account.
  rpc GetBalance (BalanceId) returns (Balance) {
    option (google.api.http) = {
      get: "/token/balances/{address}/{symbol}/{group}"
    };
  }

  rpc ListAccountBalances (BalanceId) returns (Balances) {
    option (google.api.http) = {
      get: "/token/balances/{address}"
    };
  }

  rpc ListBalances (google.protobuf.Empty) returns (Balances) {
    option (google.api.http) = {
      get: "/token/balances"
    };
  }

  // Moves amount tokens from the callerâ€™s account to recipient.
  // Returns transfer details
  rpc Transfer (TransferRequest) returns (TransferResponse) {
    option (google.api.http) = {
      post: "/token/transfer"
      body: "*"
    };
  }
}

message TransferRequest  {
  string recipient = 1 [(validator.field) = {string_not_empty : true}];
  string symbol = 2 [(validator.field) = {string_not_empty : true}];
  repeated string group = 3;
  uint64 amount = 4 [(validator.field) = {int_gt: 0}];
  repeated AddMetaRequest meta = 5;
}

message TransferResponse {
  string sender = 1;
  string recipient = 2;
  string symbol = 3;
  repeated string group = 4;
  uint64 amount = 5;
  repeated Meta meta = 6;
}

// Identifier: Balance
message BalanceId {
  string address = 1;
  string symbol = 2;
  repeated string group = 3;
}

// State: Balance
message Balance {
  string  address = 1;
  string symbol = 2;
  repeated string group = 3;
  uint64 amount = 4;
}

// List: balances
message Balances {
  repeated Balance items = 1;
}

enum OperationType {
  OPERATION_UNKNOWN = 0;
  OPERATION_TRANSFER = 1;
  OPERATION_MINT = 2;
  OPERATION_BURN = 3;
}

message Operation {
  string sender = 1;
  string recipient = 2;
  string symbol = 3;
  repeated string group = 4;
  uint64 amount = 5;
  OperationType type = 6;
}

message TransferOperation  {
  string sender = 1 [(validator.field) = {string_not_empty : true}];
  string recipient = 2 [(validator.field) = {string_not_empty : true}];
  string symbol = 3 [(validator.field) = {string_not_empty : true}];
  repeated string group = 4;
  uint64 amount = 5 [(validator.field) = {int_gt: 0}];
  repeated AddMetaRequest meta = 6;
}

message BalanceOperation  {
  string address = 1 [(validator.field) = {string_not_empty : true}];
  string symbol = 2 [(validator.field) = {string_not_empty : true}];
  repeated string group = 3;
  uint64 amount = 4 [(validator.field) = {int_gt: 0}];
  repeated AddMetaRequest meta = 5;
}

// Transferred event is emitted when Transfer method has been invoked
message Transferred  {
  string sender = 1;
  string recipient = 2;
  string symbol = 3;
  repeated string group = 4;
  uint64 amount = 5;
  repeated Meta meta = 6;
}

message AddMetaRequest {
  string key = 1 [(validator.field) = {string_not_empty : true}];
  string value = 2 [(validator.field) = {string_not_empty : true}];
}

message Meta {
  string key = 1;
  string value = 2;
}

message UTXOId {
  string address = 1;
  string symbol = 2;
  string group = 3;  // !!!! should be repeated
  string tx_id = 4;
}

message UTXO {
  string address = 1;
  string symbol = 2;
  string group = 3; // !!!! should be repeated
  string tx_id = 4;
  repeated string inputs = 5;
  uint64 amount = 6;
  repeated Meta meta = 7;
}

message UTXOs {
  repeated UTXO items = 1;
}